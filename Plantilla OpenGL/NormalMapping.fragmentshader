#version 330 core

// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 Position_worldspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;
in vec4 ShadowCoord;
in vec3 Normal_cameraspace;
in vec3 LightDirection_tangentspace;
in vec3 EyeDirection_tangentspace;

// Ouput data
//out vec4 color;
layout(location = 0) out vec4 color;

// Values that stay constant for the whole mesh.
uniform sampler2D DiffuseTextureSampler;
uniform sampler2D NormalTextureSampler;
uniform sampler2D SpecularTextureSampler;
uniform mat4 V;
uniform mat4 M;
uniform mat3 MV3x3;
uniform vec3 LightPosition_worldspace;
uniform float time;
uniform sampler2DShadow shadowMap;
uniform float PotenciaLuz;

vec2 poissonDisk[16] = vec2[]( 
   vec2( -0.94201624, -0.39906216 ), 
   vec2( 0.94558609, -0.76890725 ), 
   vec2( -0.094184101, -0.92938870 ), 
   vec2( 0.34495938, 0.29387760 ), 
   vec2( -0.91588581, 0.45771432 ), 
   vec2( -0.81544232, -0.87912464 ), 
   vec2( -0.38277543, 0.27676845 ), 
   vec2( 0.97484398, 0.75648379 ), 
   vec2( 0.44323325, -0.97511554 ), 
   vec2( 0.53742981, -0.47373420 ), 
   vec2( -0.26496911, -0.41893023 ), 
   vec2( 0.79197514, 0.19090188 ), 
   vec2( -0.24188840, 0.99706507 ), 
   vec2( -0.81409955, 0.91437590 ), 
   vec2( 0.19984126, 0.78641367 ), 
   vec2( 0.14383161, -0.14100790 ) 
);

// Returns a random number based on a vec3 and an int.
float random(vec3 seed, int i){
	vec4 seed4 = vec4(seed,i);
	float dot_product = dot(seed4, vec4(12.9898,78.233,45.164,94.673));
	return fract(sin(dot_product) * 43758.5453);
}

void main(){

	float t = 0.5 + 0.5 * cos(time);
	// Light emission properties
	// You probably want to put them as uniforms
	 vec3 color1SunSet = vec3(1.0, 0.9, 0.5);  // Amarillo/anaranjado
     vec3 color2Night = vec3(0.7, 0.4, 1.0);  // Morado
	 vec3 finalColor = mix(color1SunSet, color2Night, t);

	 vec3 color1a = vec3(0.4, 0.4, 0.4); // Primer color de transición (celeste)
    vec3 color2b = vec3(1.0, 0.5, 0.2); // Segundo color de transición (naranja)
    vec3 color3c = vec3(0.0, 0.0, 0.0); // Tercer color de transición (negro)
    
	vec3 LightColorr;
	if (time < 0.5) {
        LightColorr = mix(color1a, color2b, time * 2.0);
    } else {
        LightColorr = mix(color2b, color3c, (time - 0.5) * 2.0);
    }


	//vec3 LightColor = vec3(1,1,1);

	vec3 LightColor  = LightColorr;

	float LightPower = PotenciaLuz;
	
	// Material properties
	vec3 MaterialDiffuseColor = texture( DiffuseTextureSampler, UV ).rgb * 10;
	vec3 MaterialAmbientColor = vec3(0.1,0.1,0.1) * MaterialDiffuseColor /* finalColor*/;
	vec3 MaterialSpecularColor = texture( SpecularTextureSampler, UV ).rgb * 0.03;

	// Local normal, in tangent space. V tex coordinate is inverted because normal map is in TGA (not in DDS) for better quality
	vec3 TextureNormal_tangentspace = normalize(texture( NormalTextureSampler, vec2(UV.x,-UV.y) ).rgb*2.0 - 1.0);
	
	// Distance to the light
	float distance = length( LightPosition_worldspace  );

	// Normal of the computed fragment, in camera space
	//vec3 n = TextureNormal_tangentspace;
	vec3 n = mix(normalize( Normal_cameraspace ), TextureNormal_tangentspace, 0.8);
	//vec3 n = normalize( Normal_cameraspace );
	// Direction of the light (from the fragment to the light)
	//vec3 l = normalize(LightDirection_cameraspace);
	vec3 l = normalize(LightDirection_tangentspace);
	// Cosine of the angle between the normal and the light direction, 
	// clamped above 0
	//  - light is at the vertical of the triangle -> 1
	//  - light is perpendicular to the triangle -> 0
	//  - light is behind the triangle -> 0
	float cosTheta = clamp( dot( n,l ), 0,1 );

	// Eye vector (towards the camera)
	vec3 E = normalize(EyeDirection_cameraspace);
	//vec3 E = normalize(EyeDirection_tangentspace);
	// Direction in which the triangle reflects the light
	vec3 R = reflect(-l,n);
	// Cosine of the angle between the Eye vector and the Reflect vector,
	// clamped to 0
	//  - Looking into the reflection -> 1
	//  - Looking elsewhere -> < 1
	float cosAlpha = clamp( dot( E,R ), 0,1 );

	float visibility=1.0;
	float bias = 0.005;

	// Sample the shadow map 4 times
	for (int i=0;i<4;i++){
		int index = i;
		visibility -= 0.2*(1.0-texture( shadowMap, vec3(ShadowCoord.xy + poissonDisk[index]/700.0,  (ShadowCoord.z-bias)/ShadowCoord.w) ));
	}

	vec3 colorFinal = 
	    // Ambient : simulates indirect lighting
		MaterialAmbientColor +
		// Diffuse : "color" of the object
		visibility * MaterialDiffuseColor * LightColor * LightPower * cosTheta  /* / (distance*distance) */ +
		// Specular : reflective highlight, like a mirror
		visibility * MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha,5) /* / (distance*distance) */;

	float MixValue;
	if(time>0.7)
	{
		MixValue=0.6f;
	}
	else
	{
		MixValue=0.2f;
	}


	//color = mix(colorFinal, LightColorr, MixValue);
	color = mix(vec4(colorFinal, texture(DiffuseTextureSampler, UV).a), vec4(LightColorr, texture(DiffuseTextureSampler, UV).a), MixValue);
	//OutColorv3 = color.rgb;
}
