#version 330 core

// Interpolated values from the vertex shaders
smooth in vec2 UV;
smooth in vec3 vNormal;
smooth in vec3 vWorldPos;
smooth in vec4 vEyeSpacePos;
smooth in vec3 vTangent;
smooth in vec3 vBinormal;

in vec3 Position_worldspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;

in vec3 LightDirection_tangentspace;
in vec3 EyeDirection_tangentspace;

// Ouput data
out vec3 FragColor;

// Values that stay constant for the whole mesh.
uniform sampler2D Texture1;
uniform sampler2D Texture1Normal;
uniform sampler2D Texture2;
uniform sampler2D Texture2Normal;
uniform sampler2D Texture3;
uniform sampler2D Texture3Normal;
uniform sampler2D BackNormal;
uniform sampler2D Blendmap;
uniform sampler2D heightmap;
uniform float time;
uniform vec3 lightPos;

const float ambientStrength = 0.8;
const float specularStrength = 0.9;
const float shininess = 32.0;

// Factor de intensidad de la normal perturbada
const float normalStrength = 20.0;

void main()
{

vec3 color1a = vec3(0.75, 0.75, 0.75); // Primer color de transición (celeste)
     vec3 color2b = vec3(1.0, 0.5, 0.2); // Segundo color de transición (naranja)
     vec3 color3c = vec3(0.0, 0.0, 0.0); // Tercer color de transición (negro)

vec3 LightColorr;
    if (time < 0.5) {
        LightColorr = mix(color1a, color2b, time * 2.0);
    } else {
        LightColorr = mix(color2b, color3c, (time - 0.5) * 2.0);
    }

    //vec3 LightColor = vec3(1,1,1);
	vec3 LightColor = LightColorr;
	float LightPower = 1.8f;

     vec4 blendData = texture2D( Blendmap, UV/51.2f);
     float vBlendr = blendData.r;
     float vBlendg = blendData.g;
     float vBlendb = blendData.b;
     vec2 UvsColor1 = vec2(UV.x, UV.y);
     vec4 color1 = vBlendr * texture2D( Texture1, UvsColor1/3);
     vec4 color2 = vBlendg * texture2D( Texture2, UV);
     vec4 color3 = vBlendb * texture2D( Texture3, UV);

     float black = clamp(1 - (blendData.r + blendData.g + blendData.b), 0.0f, 1.0f);
     vec4 backgroundChannel = texture(BackNormal, vec2(UV.x,UV.y)) * black;
	 vec4 redChannel = texture(Texture1Normal, vec2(UV.x,UV.y)/3) * blendData.r;
	 vec4 greenChannel = texture(Texture2Normal, vec2(UV.x,UV.y)) * blendData.g;
	 vec4 blueChannel = texture(Texture3Normal, vec2(UV.x,UV.y)) * blendData.b;

     vec4 FinalColorNormal = redChannel + greenChannel + blueChannel;

     vec4 FinalColor = color1 + color2 + color3;

      // Material properties
	vec3 MaterialDiffuseColor = FinalColor.rgb * 10;
	vec3 MaterialAmbientColor = vec3(0.1,0.1,0.1) * MaterialDiffuseColor /* finalColor*/;
	vec3 MaterialSpecularColor = FinalColor.rgb * 0.03;

    // Local normal, in tangent space. V tex coordinate is inverted because normal map is in TGA (not in DDS) for better quality
	vec3 TextureNormal_tangentspace = normalize(FinalColorNormal.rgb*2.0 - 1.0);
	//vec3 TextureNormal_tangentspace = normalize(texture( Texture1Normal, vec2(UV.x,-UV.y) ).rgb*2.0 - 1.0);
	
    // Distance to the light
	float distance = length( lightPos  );
    vec3 n = TextureNormal_tangentspace;
	// Direction of the light (from the fragment to the light)

	vec3 LighNewDirection = LightDirection_tangentspace;
	LighNewDirection.y = time;

	vec3 l = normalize(LightDirection_tangentspace);
	// Cosine of the angle between the normal and the light direction, 
	// clamped above 0
	//  - light is at the vertical of the triangle -> 1
	//  - light is perpendicular to the triangle -> 0
	//  - light is behind the triangle -> 0
	float cosTheta = clamp( dot( n,l ), 0,1 );

    // Eye vector (towards the camera)
	vec3 E = normalize(EyeDirection_tangentspace);
	// Direction in which the triangle reflects the light
	vec3 R = reflect(-l,n);
	// Cosine of the angle between the Eye vector and the Reflect vector,
	// clamped to 0
	//  - Looking into the reflection -> 1
	//  - Looking elsewhere -> < 1
	float cosAlpha = clamp( dot( E,R ), 0,1 );
	

	vec3 colorFinal = 
	    // Ambient : simulates indirect lighting
		MaterialAmbientColor +
		// Diffuse : "color" of the object
		MaterialDiffuseColor * LightColor * LightPower * cosTheta / (distance*distance) +
		// Specular : reflective highlight, like a mirror
		MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha,5) / (distance*distance);

     float MixValue;
	if(time>0.5)
	{
		MixValue=0.5f;
	}
	else
	{
		MixValue=0.3f;
	}

    vec3 MixedColor = mix(colorFinal, LightColorr, MixValue);

    FragColor = MixedColor;
}