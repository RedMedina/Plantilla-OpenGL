#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 squareVertices;

// Output data ; will be interpolated for each fragment.
out vec2 UV;

// Values that stay constant for the whole mesh.
uniform mat4 orthoMatrix; // Orthographic projection matrix
vec2 screenSize = vec2(1080, 720); // Size of the screen in pixels
uniform vec3 BillboardPos; // Position of the center of the billboard, in pixels
uniform vec2 billboardSize; // Size of the billboard, in pixels

void main()
{
    vec2 billboardCenter = vec2(BillboardPos.x, BillboardPos.y);
    vec2 position_screen_space = billboardCenter + vec2(squareVertices.x, squareVertices.y) * billboardSize;
    
    vec4 position_ndc = vec4(position_screen_space / screenSize * 2.0 - 1.0, 0.0, 1.0);
    vec4 position_clip_space = orthoMatrix * position_ndc;
    vec3 position_world_space = position_clip_space.xyz / position_clip_space.w;

    // Output position of the vertex
    gl_Position = vec4(position_world_space, 1.0);

    // UV of the vertex. No special space for this one.
    UV = squareVertices.xy + vec2(0.5, 0.5);
}
