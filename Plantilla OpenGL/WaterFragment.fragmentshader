#version 330 core

in vec2 UV;
in vec3 FragPos;
in vec3 vertexPosition_modelspace2;
in vec3 Normal;
in vec3 Tangent;
in vec3 binormal;


out vec4 fragColor;

uniform sampler2D WaterTexture;
uniform sampler2D NormalTexture;
uniform sampler2D NormalTexture2;
uniform sampler2D ReflectionClouds;

uniform vec2 textureOffset;
uniform float time;
uniform float MixValue;
uniform vec3 lightDirection;

vec3 viewPos = vec3(1.0f, 1.0f, 1.0f);

const float amplitude = 0.05; // Amplitud de la onda de agua
const float speed = 0.5; // Velocidad de la onda de agua
const float frequency = 5.0; // Frecuencia de la onda de agua
const float bumpPower = 2000000.0; // Potencia del bump map

vec3 calcNormal()
{
    vec3 q0 = dFdx(FragPos);
    vec3 q1 = dFdy(FragPos);
    vec2 st0 = dFdx(UV);
    vec2 st1 = dFdy(UV);

    vec3 S = normalize(q0 * st1.t - q1 * st0.t);
    vec3 T = normalize(-q0 * st1.s + q1 * st0.s);
    vec3 N = normalize(Normal);
    vec3 Binormal = normalize(binormal);
    vec2 texCoord2 = UV;
    texCoord2.y += amplitude * sin(speed * UV.x + frequency * (time)/5);
    vec2 texCoord3 = UV;
    texCoord3.x += amplitude * sin(speed * UV.y + frequency * (time)/5);
    vec3 mapN;

    vec3 mapNTex1 = (1-texture(NormalTexture, texCoord2*10).rgb) * 2.0 - 1.0;
    vec3 mapNTex2 = (texture(NormalTexture2, texCoord3*10).rgb) * 2.0 - 1.0;
    mapN = mix(mapNTex1, mapNTex2, 0.5);
    mat3 TBN = mat3(T, Binormal, N);
    return normalize(bumpPower * TBN * mapN);
}

void main()
{
    vec2 texCoord = UV;
    texCoord.y += amplitude * sin(speed * UV.x + frequency * time);
    
    vec3 newNormal = calcNormal();
    //vec3 viewDir = normalize(vertexPosition_modelspace2 - FragPos);
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 lightDir = normalize(vec3(0.5, 1.0, 0.3));
    float ambient = 0.2;
    float diffuse = max(dot(newNormal, lightDir), 0.0);
    //float specular = pow(max(dot(viewDir, reflect(-lightDir, newNormal)), 0.0), 32);
    vec3 specular = vec3(0.35); // Valor constante para el brillo especular
    //fragColor = texture(WaterTexture, UV*6) * vec4(vec3(ambient + diffuse + specular), 1.0);
    
    vec4 CloudColor = texture(ReflectionClouds, (UV*2) + textureOffset);
    float transparency = CloudColor.r;
    vec3 cloudColor2 = vec3(1.0) * 5;
    vec4 ReflectionColorFinal = vec4(cloudColor2, transparency);

    vec4 FinalWaterColor = mix(texture(WaterTexture, UV*6), ReflectionColorFinal, 0.2) * vec4(vec3(ambient + diffuse) + specular, 1.0);

    //fragColor = FinalWaterColor;
    fragColor = texture(WaterTexture, UV*20) * vec4(vec3(ambient + diffuse) + specular, 1.0);

    //vec4 texColor = texture(WaterTexture, UV + textureOffset);
    //fragColor = texColor;
}