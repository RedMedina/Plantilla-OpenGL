#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec2 vertexUV;

// Output data ; will be interpolated for each fragment.
out vec2 UV;

// Values that stay constant for the whole mesh.
uniform mat4 MVP;
uniform float time1;
float windStrength = 0.01;
float windFrequency = 0.5;
uniform vec3 Position;
// Number of repetitions

void main()
{

	float displacement = sin(Position.y * windFrequency + time1/10) * windStrength;
    vec3 windOffset = vec3(0.0, displacement, 0.0);

    gl_Position = MVP * vec4((vertexPosition_modelspace+windOffset), 1.0f);
   

	// UV of the vertex. No special space for this one.
	UV = vertexUV;
}
